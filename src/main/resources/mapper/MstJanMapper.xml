<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.trechina.planocycle.mapper.MstJanMapper">
    <update id="setJanInfo">
        insert into ${tableName}("1"
        <foreach collection="list" item="item" index="index">
            ,"${index}"
        </foreach>
        )
        values (#{jan}
        <foreach collection="list" item="item">
            ,#{item}
        </foreach>
        )
            on conflict("1")
        do update set
            <foreach collection="list" item="item" index="index" separator=",">
                "${index}" = #{item}
            </foreach>
    </update>
    <!--"{0}".prod_{1}_jan_attr_header_sys  -->
    <select id="getJanHeader" resultType="com.trechina.planocycle.entity.po.JanHeaderAttr">
        select "1" "attr","2" "attrVal","3" "sort", "4" "colSort", "11" "type" from ${tableName}
        where "1" in (
        <foreach collection="janColumn.split(',')" item="item" index="idx" separator=",">
            #{item,jdbcType=VARCHAR}
        </foreach>)
        union
        select "1" "attr","2" "attrVal","3" "sort", "4" "colSort", '2' "type" from ${tableNameKaisou}
        where "1" in (
        <foreach collection="janColumn.split(',')" item="item" index="idx" separator=",">
            #{item,jdbcType=VARCHAR}
        </foreach>)
        union
        select "1" "attr","2" "attrVal","3" "sort", "4" "colSort", "11" "type" from ${tableNamePlanoCycle}
        where "1" in (
        <foreach collection="janColumn.split(',')" item="item" index="idx" separator=",">
            #{item,jdbcType=VARCHAR}
        </foreach>)
    </select>

    <select id="getJanHeaderByName" resultType="com.trechina.planocycle.entity.po.JanHeaderAttr">
        select "1" "attr","2" "attrVal","3" "sort","13" as type from ${tableName}
        where "2" in (
        <foreach collection="headerName.split(',')" item="item" index="idx" separator=",">
            #{item,jdbcType=VARCHAR}
        </foreach>)
        union
        select "1" "attr","2" "attrVal","3" "sort",'1' as type from ${tableNameKaisou}
        where "2" in (
        <foreach collection="headerName.split(',')" item="item" index="idx" separator=",">
            #{item,jdbcType=VARCHAR}
        </foreach>)
        union
        select "1" "attr","2" "attrVal","3" "sort",'1' as type from "9999".prod_0000_jan_attr_header_sys
        where "2" in (
        <foreach collection="headerName.split(',')" item="item" index="idx" separator=",">
            #{item,jdbcType=VARCHAR}
        </foreach>)
    </select>

    <select id="getJanCount" resultType="long">
        <include refid="Base_Jan_List" />
    </select>

    <select id="getJanList" resultType="java.util.LinkedHashMap">
        <include refid="Base_Jan_List" />
        order by a."1"
    </select>
    <select id="getJanInfoList" resultType="java.util.LinkedHashMap">
        select
            a."1", a."2",
               <foreach collection="janInfoHeader" item="item">
                   "${item}",
               </foreach>
               b."104",b."105",b."106",b."107",b."108",b."109",b."110"
             , b."201", b."202", b."203", b."204", b."205", b."206",
            b."207", b."208", b."209", b."210", b."211", b."212", b."213", b."214", b."215", b."216", b."217", b."218", b."219"
               , b."220", b."221", b."222", b."223", b."224", b."225", b."226", b."227", b."228", b."229", b."230"
        from
        ${tableName} a
        left join "9999".prod_0000_jan_info b
        on a."1" = b."1"
        where a."1" = #{jan}
    </select>
    <select id="getJanAttrList" resultType="java.util.LinkedHashMap">
    select "1","2","3","4","11","13"
    from ${tableName}
    where "1" not in ('jan_name','jan_cd')
    union
    select "1","2","3","4","11","13"
    from "9999".prod_0000_jan_attr_header_sys
    where "1" not in ('jan_name','jan_cd')
    order by "4"
    </select>
    <select id="getJanKaisouList" resultType="java.util.LinkedHashMap">
        select "1","2","3","4" from ${tableName} where "4" is not null and "1" like '%_name' and "1" not in ('jan_name') order by "4" :: integer
    </select>

    <!--"{0}".prod_{1}_jan_info  -->
    <sql id="Base_Jan_List">
        select ${column} from ${tableName} a
        left join ${janInfoTablePlanoCycle} b on a."1" =b."1"
        where 1=1
            <if test="janParamVO.fuzzyQuery != ''">
                and  "2" like concat(concat('%', #{janParamVO.fuzzyQuery}), '%')
            </if>

        <if test="janParamVO.janContain != null and janParamVO.janContain != ''">
            and a."1" in(
            <foreach collection="janParamVO.janContain.split(',')" item="items" separator=",">
                #{items}
            </foreach>
            )
        </if>
        <if test="janParamVO.janKato != null and janParamVO.janKato != ''">
            and a."1" not in(
            <foreach collection="janParamVO.janKato.split(',')" item="items" separator=",">
                #{items}
            </foreach>)
        </if>
        <if test="janParamVO.prodCd != null and janParamVO.prodCd != ''">
            and(
            <foreach collection="janParamVO.prodCd.split(',')" item="items" separator="or" >
                <foreach collection="items.split('_')" item="item" index="index" separator="and" open ="(" close = ")">
                    "${index*2+3}" =
                    <choose>
                        <when test="item.split('-').length==2">
                            '${item.split('-')[1]}'
                        </when>
                        <otherwise>
                            '${item}'
                        </otherwise>
                    </choose>
                </foreach>
            </foreach>
            )
        </if>
    </sql>

    <select id="getAttrName" resultType="com.trechina.planocycle.entity.po.JanAttrName">
        select * from (
        select "1" "value","2" "label",
        case "11" when '1' then '基本項目'
        when '2' then '商品分類'
        when '3' then '商品属性'
        when '4' then 'Plano-Cycle専用'
        when '5' then 'Plano-Cycle専用'
        when '6' then 'Plano-Cycle追加'
        else ''
        end as "attrType",
        case "12" when '1' then true else false end as "mandatory",
        case when "12" = '1' then true
        when t2.item_cd is not null then true
        else false end as "flag",t1."11",t1."3"::integer
        from ${tableName} t1
        left join ${tableNamePreset} t2 on t1."1" =t2.item_cd and t2.author_cd = #{authorCd}
        union all
        select
        "1" "value","2" "label", '商品分類' "attrType",
        false  as "mandatory",
        case when t2.item_cd is not null then true
        else false end as "flag",'2' as "11",t1."3"::integer
        from ${tableNameKaisou} t1
        left join ${tableNamePreset} t2 on t1."1" =t2.item_cd and t2.author_cd = #{authorCd}
        where "1" not in('jan_cd','jan_name')
        union all
        select "1" "value", "2" "label", 'Plano-Cycle専用' "attrType",
		case
			"12" when '1' then true
			else false
		end as "mandatory",
		case
			when "12" = '1' then true
			when t2.item_cd is not null then true
			else false
		end as "flag",
		t1."11",
		t1."3"::integer
	from
		${tableNamePlanoCycle} t1
	left join ${tableNamePreset} t2 on
		t1."1" = t2.item_cd
		and t2.author_cd =  #{authorCd}
        ) a
        order by "11","3"
    </select>
    <select id="getKaiSouName" resultType="java.util.Map">
        select distinct
         <foreach collection="list" item="item" separator=",">
             "${item}"
         </foreach>
         from ${tableName}
        where
    <foreach collection="map" index="index" item="item" separator="and">
              <if test="item != null and item != ''">
                  "${index}" = #{item}
              </if>
    </foreach>
    limit 1
    </select>
    <select id="getNameExist" resultType="java.lang.String">
        select "1" from ${tableName} where "2" = #{name}
    </select>
    <select id="checkKaisou" resultType="java.lang.String">
        select count(1) from ${tableNameInfo} where
        <foreach collection="map" item="item" index="index" separator="and" >
            "${index}" = #{item}
        </foreach>
    </select>
    <select id="getKaiSouLength" resultType="java.lang.Integer">
        select length("3") from ${tableNameInfo} limit 1
    </select>
    <select id="getPlanoType" resultType="com.trechina.planocycle.entity.po.JanHeaderAttr">
        select "1" as "attr","2" as "attrVal","3" as "sort","13" as "type" from ${tableName} where "1" like 'plano%' and "13" = '0'
    </select>
    <select id="getJanInfoCol" resultType="java.lang.String">
        select "3" from "9999".prod_0000_jan_attr_header_sys
    </select>
    <select id="getAttrValueList" resultType="java.lang.String">
        select  "${colName}" from (
            select distinct "${colName}"
            from "${company}".prod_${classCd}_jan_info where  "${colName}" != ''
                 )t1
        order by "${colName}" collate "C.UTF-8"
    </select>

    <insert id="insertPresetAttribute">
        insert into ${tableName}
        values
        <foreach collection="presetAttr" separator="," item="item">
            (#{authorCd},#{item})
        </foreach>
    </insert>
    <delete id="deleteByAuthorCd">
        delete from ${tableName} where author_cd=#{authorCd}
    </delete>
    <update id="clearCol">
        update ${janInfoTableName} set "${colName}" = null
    </update>

    <insert id="insertJanList">
        insert into ${tableName}(
         <foreach collection="janData[0]" index="index" separator=",">
             "${index}"
         </foreach>
         ,"102","103"
        )
        values
        <foreach collection="janData" item="items" separator=",">
            (
            <foreach collection="items.entrySet()" item="value" separator=",">
                #{value}
            </foreach>
            ,#{authorCd}, #{date}
            )
        </foreach>
        on conflict("1")
        do update set
        <foreach collection="janData[0]" index="index" separator=",">
            "${index}" = EXCLUDED."${index}"
        </foreach>
        ,"102" = #{authorCd}
        ,"103" = #{date}
    </insert>

    <update id="syncJanHeader">
        insert into ${tableName}
        select *
        from
            ${tableNameWK}
            on
            conflict("1") do
        update
        set
            "2" = excluded."2",
            "3" = excluded."3",
            "4" = excluded."4",
            "5" = excluded."5",
            "6" = excluded."6",
            "7" = excluded."7",
            "8" = excluded."8",
            "9" = excluded."9",
            "10" = excluded."10"
    </update>

    <update id="syncJanData">
        insert into ${tableName}
        select *
        from
            ${tableNameWK}
            on
            conflict("1") do
        update
        set
        <foreach collection="column.split(',')" item="item" separator=",">
            "${item}" = EXCLUDED."${item}"
        </foreach>
    </update>
    <update id="setJanSpecial">
        insert into "9999".prod_0000_jan_info("1"
        <foreach collection="list" item="item" index="index">
            ,"${index}"
        </foreach>
        )
        values (#{jan},
        <foreach collection="list" item="item" separator=",">
           #{item}
        </foreach>
        )
        on conflict("1")
        do update set
        <foreach collection="list" item="item" index="index" separator=",">
            "${index}" = #{item}
        </foreach>
    </update>
    <update id="janHeaderAddFlag">
        update ${tableNameHeader} set "11"=1 where "1" in('jan_cd', 'jan_name');
        update ${tableNameHeader} set "11"=3 where "11" is null;
        update ${tableNameHeader} set "13"=1 where "13" is null;
        update ${tableNameHeader} set "12"=1 where "1" in('jan_cd');

    </update>

    <delete id="deleteKaisou">
        delete from ${tableName}
    </delete>
    <insert id="insertKaisou">
        insert into ${tableName}
        select * from  ${tableNameWK}
      </insert>
    <insert id="insertJanSpecialList">
        insert into "9999".prod_0000_jan_info(
        <foreach collection="janData[0]" index="index" separator=",">
            "${index}"
        </foreach>

        )
        values
        <foreach collection="janData" item="items" separator=",">
            (
            <foreach collection="items.entrySet()" item="value" separator=",">
                #{value}
            </foreach>
            )
        </foreach>
        on conflict("1")
        do update set
        <foreach collection="janData[0]" index="index" separator=",">

            "${index}" = EXCLUDED."${index}"
        </foreach>
    </insert>
    <insert id="createJanHeader">
        create table IF NOT EXISTS ${tableNameHeader} as select
            *
            from
            ${tableNameHeaderWK}
            where
            1 = 2
            limit 1;
    </insert>
    <insert id="addJanHeaderCol">
        alter table ${tableNameHeader} add column "11" varchar
            , add column "12" varchar
            ,add column "13" varchar
            ,ADD CONSTRAINT "${tableNameHeaderPkey}" PRIMARY KEY ("1");
    </insert>
    <insert id="janHeaderAddUpdater">
        INSERT INTO ${tableNameHeader} ("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13")
        VALUES ('sync', '同期Flg', '101', '101', '1', NULL, '1', '4', NULL, '0', '4', NULL, '0'),
        ('update_time', '更新時間', '102', '102', '1', NULL, '1', '4', NULL, '1', '4', NULL, '1'),
          ('updater', '更新者', '103', '103', '1', NULL, '1', '4', NULL, '1', '4', NULL, '1');
    </insert>
    <insert id="createJanData">
        create table IF NOT EXISTS ${tableNameInfo} as select
            *
            from
            ${tableNameInfoWK}
            where
            1 = 2
            limit 1;
    </insert>
    <insert id="addJanDataCol">
        alter table ${tableNameHeader} add column "100" varchar
            , add column "101" varchar
            ,add column "102" varchar
            ,add column "103" varchar
            ,ADD CONSTRAINT "${tableNameHeaderPkey}" PRIMARY KEY ("1");
    </insert>
    <insert id="createMasterSyohin">
        create table IF NOT EXISTS "${companyCd}".master_syohin as select
            *
            from
            "${companyCd}".wk_master_syohin
            where
            1 = 2
            limit 1;
        alter table "${companyCd}".master_syohin add column  "3" bool default true
            ,ADD CONSTRAINT "master_syohin_pkey" PRIMARY KEY ("1");
    </insert>
    <insert id="createJanPreset">
        create table IF NOT EXISTS "${companyCd}".prod_${classCd}_jan_preset_param(
                                         "author_cd" varchar COLLATE "pg_catalog"."default",
                                         "item_cd" varchar COLLATE "pg_catalog"."default");
    </insert>

    <select id="getJanAttrColWK" resultType="java.lang.String">
        select "3" from ${tableNameHeaderWK}
        union select "3" from ${tableNameKaisouHeader}
    </select>
    <select id="getAttrNameForId" resultType="java.lang.String">
        select distinct "2"
        from "${company}".prod_${classCd}_jan_attr_header_sys where "3" = '${colName}'
    </select>

    <delete id="deleteMultipleJan">
        delete from ${tableNameInfoWK} a
        where (
        <foreach collection="janKaisouCol" item="item" separator="," >
            "${item}"
        </foreach>
        ) in (
        select
        <foreach collection="janKaisouCol" item="item" separator=",">
            "${item}"
        </foreach>
        from (
        select
        <foreach collection="janKaisouCol" item="item" separator=",">
            "${item}"
        </foreach>
        ,ROW_NUMBER() over (partition by "1") as num from ${tableNameInfoWK})b where
        b.num>1)
    </delete>
    <delete id="deleteJanIsNull">
        delete from  ${tableNameInfoWK} where "1" is null
    </delete>

    <select id="getJanKaisouColWK" resultType="java.lang.String">
        select "3" from ${tableName} where "1" like '%_cd' order by "3"
    </select>
    <select id="getJanInfoHeader" resultType="java.lang.String">
        select "3" from ${tableNameAttr} where "3" not in ('1','2')
        union
        select "3" from ${tableNameKaisou} where "3" not in ('1','2')
    </select>
    <select id="selectTableExist" resultType="string">
        select "table_name" from information_schema.tables where "table_name" = 'master_syohin' and "table_schema" = '${tableName}'
    </select>
    <select id="selectCompanyName" resultType="string">
        select "2" from masterdb.kigyou_name where "1"=#{companyCd};
    </select>
    <select id="getConvertNumbers" resultType="string">
        select  convert_numbers
        from  planocycle.sku_name_config
        where company_cd = #{companyCd} and class = #{classCd}
    </select>
    <select id="getAttrConvertToNumber" resultType="java.lang.String">
        select a  from (
                          select distinct
                              "array_to_string"(regexp_matches(case when "${colName}" !~ '\d' then '0' else "${colName}" end, '\d+'),',')  a
                          from
                              "${company}".prod_${classCd}_jan_info
                          where
                              "${colName}" != ''
                      ) a
            order by a::integer
    </select>
    <select id="getNewValue" resultType="string">
        select b from (
                          select DISTINCT
                              "array_to_string"(regexp_matches(case when "${colCd}" !~ '\d' then '0' else "${colCd}" end, '\d+'),',') a ,"11" b
                          from
                            "${company}".prod_${classCd}_jan_info
                          where
                            "${colCd}" != ''
                      ) a
        where a.a in
        <foreach collection="value" separator="," open="(" close=")" item="item">
            #{item}
        </foreach>
    </select>
    <select id="checkPrimaryKey" resultType="int">
        select count(*) from information_schema.table_constraints where table_schema=#{schema} and table_name=#{table}
        and constraint_type='PRIMARY KEY'
    </select>
    <update id="addPrimaryKey">
        alter table "${schema}"."${table}" add constraint ${pkName}
        primary key ("${primaryKey}");
    </update>
</mapper>