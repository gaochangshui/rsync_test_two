<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.trechina.planocycle.mapper.MstJanMapper">
    <update id="setJanInfo">
        insert into ${tableName}("1"
        <foreach collection="list" item="item" index="index">
            ,"${index}"
        </foreach>
        )
        values (#{jan}
        <foreach collection="list" item="item">
            ,#{item}
        </foreach>
        )
            on conflict("1")
        do update set
            <foreach collection="list" item="item" index="index" separator=",">
                "${index}" = #{item}
            </foreach>
    </update>
    <!--"{0}".prod_{1}_jan_attr_header_sys  -->
    <select id="getJanHeader" resultType="com.trechina.planocycle.entity.po.JanHeaderAttr">
        select "1" "attr","2" "attrVal","3" "sort", "4" "colSort" from ${tableName}
        where "1" in (
        <foreach collection="janColumn.split(',')" item="item" index="idx" separator=",">
            #{item,jdbcType=VARCHAR}
        </foreach>)
        union
        select "1" "attr","2" "attrVal","3" "sort", "4" "colSort" from ${tableNameKaisou}
        where "1" in (
        <foreach collection="janColumn.split(',')" item="item" index="idx" separator=",">
            #{item,jdbcType=VARCHAR}
        </foreach>)
    </select>

    <select id="getJanHeaderByName" resultType="com.trechina.planocycle.entity.po.JanHeaderAttr">
        select "1" "attr","2" "attrVal","3" "sort","13" as type from ${tableName}
        where "2" in (
        <foreach collection="headerName.split(',')" item="item" index="idx" separator=",">
            #{item,jdbcType=VARCHAR}
        </foreach>)
        union
        select "1" "attr","2" "attrVal","3" "sort",'1' as type from ${tableNameKaisou}
        where "2" in (
        <foreach collection="headerName.split(',')" item="item" index="idx" separator=",">
            #{item,jdbcType=VARCHAR}
        </foreach>)
    </select>

    <select id="getJanCount" resultType="long">
        <include refid="Base_Jan_List" />
    </select>

    <select id="getJanList" resultType="java.util.LinkedHashMap">
        <include refid="Base_Jan_List" />
        order by "1"
    </select>
    <select id="getJanInfoList" resultType="java.util.LinkedHashMap">
        select
            a."1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13"
               , "100", "101", "102", "103", b."104","105","106","107","108","109","110"
             , "201", "202", "203", "204", "205", "206",
            "207", "208", "209", "210", "211", "212", "213", "214", "215", "216", "217", "218", "219"
               , "220", "221", "222", "223", "224", "225", "226", "227", "228", "229", "230"
        from
        ${tableName} a
        left join "9999".prod_0000_jan_info b
        on a."1" = b."1"
        where a."1" = #{jan}
    </select>
    <select id="getJanAttrList" resultType="java.util.LinkedHashMap">
    select "1","2","3","4","11","13"
    from ${tableName}
    where "1" not in ('jan_name','jan_cd')
    union
    select "1","2","3","4","11","13"
    from "9999".prod_0000_jan_attr_header_sys
    where "1" not in ('jan_name','jan_cd')
    order by "4"
    </select>
    <select id="getJanKaisouList" resultType="java.util.LinkedHashMap">
        select "1","2","3","4" from ${tableName} where "4" is not null and "1" like '%_name' and "1" not in ('jan_name') order by "4"
    </select>

    <!--"{0}".prod_{1}_jan_info  -->
    <sql id="Base_Jan_List">
        select ${column} from ${tableName}
        where "2" like concat(concat('%', #{janParamVO.fuzzyQuery}), '%')
        <if test="janParamVO.janContain != null and janParamVO.janContain != ''">
            and "1" in(
            <foreach collection="janParamVO.janContain.split(',')" item="items" separator=",">
                #{items}
            </foreach>
            )
        </if>
        <if test="janParamVO.janKato != null and janParamVO.janKato != ''">
            and "1" not in(
            <foreach collection="janParamVO.janKato.split(',')" item="items" separator=",">
                #{items}
            </foreach>)
        </if>
        <if test="janParamVO.prodCd != null and janParamVO.prodCd != ''">
            and(
            <foreach collection="janParamVO.prodCd.split(',')" item="items" separator="or" >
                <foreach collection="items.split('_')" item="item" index="index" separator="and" open ="(" close = ")">
                    "${index*2+3}" =
                    <choose>
                        <when test="item.split('-').length==2">
                            '${item.split('-')[1]}'
                        </when>
                        <otherwise>
                            '${item}'
                        </otherwise>
                    </choose>
                </foreach>
            </foreach>
            )
        </if>
    </sql>

    <select id="getAttrName" resultType="com.trechina.planocycle.entity.po.JanAttrName">
        select * from (
        select "1" "value","2" "label",
        case "11" when '1' then '基本項目'
        when '2' then '商品分類'
        when '3' then '商品属性'
        when '4' then 'Plano-Cycle専用'
        when '5' then 'Plano-Cycle専用'
        when '6' then 'Plano-Cycle追加'
        else ''
        end as "attrType",
        case "12" when '1' then true else false end as "mandatory",
        case when "12" = '1' then true
        when t2.item_cd is not null then true
        else false end as "flag",t1."11",t1."3"::integer
        from ${tableName} t1
        left join ${tableNamePreset} t2 on t1."1" =t2.item_cd and t2.author_cd = #{authorCd}
        union all
        select
        "1" "value","2" "label", '商品分類' "attrType",
        false  as "mandatory",
        case when t2.item_cd is not null then true
        else false end as "flag",'2' as "11",t1."3"::integer
        from ${tableNameKaisou} t1
        left join ${tableNamePreset} t2 on t1."1" =t2.item_cd and t2.author_cd = #{authorCd}
        where "1" not in('jan_cd','jan_name')) a
        order by "11","3"
    </select>
    <select id="getKaiSouName" resultType="java.util.Map">
        select distinct
         <foreach collection="list" item="item" separator=",">
             "${item}"
         </foreach>
         from ${tableName}
        where
    <foreach collection="map" index="index" item="item" separator="and">
              <if test="item != null and item != ''">
                  "${index}" = #{item}
              </if>
    </foreach>
    </select>
    <select id="getNameExist" resultType="java.lang.String">
        select "1" from ${tableName} where "2" = #{name}
    </select>
    <select id="checkKaisou" resultType="java.lang.String">
        select count(1) from ${tableNameInfo} where
        <foreach collection="map" item="item" index="index" separator="and" >
            "${index}" = #{item}
        </foreach>
    </select>
    <select id="getKaiSouLength" resultType="java.lang.Integer">
        select length("3") from ${tableNameInfo} limit 1
    </select>
    <select id="getPlanoType" resultType="com.trechina.planocycle.entity.po.JanHeaderAttr">
        select "1" as "attr","2" as "attrVal","3" as "sort","13" as "type" from ${tableName} where "1" like 'plano%' and "13" = '0'
    </select>
    <select id="getJanInfoCol" resultType="java.lang.String">
        select "3" from "9999".prod_0000_jan_attr_header_sys
    </select>

    <insert id="insertPresetAttribute">
        insert into ${tableName}
        values
        <foreach collection="presetAttr" separator="," item="item">
            (#{authorCd},#{item})
        </foreach>
    </insert>
    <delete id="deleteByAuthorCd">
        delete from ${tableName} where author_cd=#{authorCd}
    </delete>
    <update id="clearCol">
        update ${janInfoTableName} set "${colName}" = null
    </update>

    <insert id="insertJanList">
        insert into ${tableName}(
         <foreach collection="janData[0]" index="index" separator=",">
             "${index}"
         </foreach>
         ,"102","103"
        )
        values
        <foreach collection="janData" item="items" separator=",">
            (
            <foreach collection="items.entrySet()" item="value" separator=",">
                #{value}
            </foreach>
            ,#{authorCd}, #{date}
            )
        </foreach>
        on conflict("1")
        do update set
        <foreach collection="infoHeader.split(',')" item="item" separator=",">
            ${item} = EXCLUDED.${item}
        </foreach>
        ,"102" = #{authorCd}
        ,"103" = #{date}
    </insert>

    <update id="syncJanHeader">
        insert into ${tableName}
        select *
        from
            ${tableNameWK}
            on
            conflict("1") do
        update
        set
            "2" = excluded."2",
            "3" = excluded."3",
            "4" = excluded."4",
            "5" = excluded."5",
            "6" = excluded."6",
            "7" = excluded."7",
            "8" = excluded."8",
            "9" = excluded."9",
            "10" = excluded."10"
    </update>

    <update id="syncJanData">
        insert into ${tableName}
        select *
        from
            ${tableNameWK}
            on
            conflict("1") do
        update
        set
        "2" = excluded."2",
        <foreach collection="column.split(',')" item="item" separator=",">
            "${item}" = EXCLUDED."${item}"
        </foreach>
    </update>
    <update id="setJanSpecial">
        insert into "9999".prod_0000_jan_info("1"
        <foreach collection="list" item="item" index="index">
            ,"${index}"
        </foreach>
        )
        values (#{jan}
        <foreach collection="list" item="item">
            ,#{item}
        </foreach>
        )
        on conflict("1")
        do update set
        <foreach collection="list" item="item" index="index" separator=",">
            "${index}" = #{item}
        </foreach>
    </update>

    <delete id="deleteKaisou">
        delete from ${tableName}
    </delete>
    <insert id="insertKaisou">
        insert into ${tableName}
        select * from  ${tableNameWK}
      </insert>

</mapper>