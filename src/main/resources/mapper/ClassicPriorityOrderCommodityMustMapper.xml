<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.trechina.planocycle.mapper.ClassicPriorityOrderCommodityMustMapper">
  <resultMap id="BaseResultMap" type="com.trechina.planocycle.entity.po.PriorityOrderCommodityMust">
    <id column="company_cd" jdbcType="VARCHAR" property="companyCd" />
    <id column="priority_order_cd" jdbcType="INTEGER" property="priorityOrderCd" />
    <id column="branch" jdbcType="VARCHAR" property="branch" />
    <id column="jan_new" jdbcType="VARCHAR" property="jan" />
  </resultMap>
  <insert id="setFinalForWork">
    insert into priority.priority_order_commodity_must
    select  company_cd,priority_order_cd,branch,jan_new
    from priority.work_priority_order_commodity_must
    where company_cd = #{companyCd,jdbcType=VARCHAR}
      and priority_order_cd = #{priorityOrderCd,jdbcType=INTEGER}
  </insert>
  <insert id="setWorkForFinal">
    insert into priority.work_priority_order_commodity_must
    select  company_cd,priority_order_cd,branch,jan_new
    from priority.priority_order_commodity_must
    where company_cd = #{companyCd,jdbcType=VARCHAR}
      and priority_order_cd = #{priorityOrderCd,jdbcType=INTEGER}
  </insert>
  <delete id="deleteByPrimaryKey" parameterType="map">
    delete from priority.work_priority_order_commodity_must
    where company_cd = #{companyCd,jdbcType=VARCHAR}
      and priority_order_cd = #{priorityOrderCd,jdbcType=INTEGER}
  </delete>
  <delete id="deletePriorityBranchNum">
    delete from priority.priority_order_branch_num
    where company_cd = #{companyCd,jdbcType=VARCHAR}
      and priority_order_cd = #{priorityOrderCd,jdbcType=INTEGER}
  </delete>
  <delete id="deleteFinal">
    delete from priority.priority_order_commodity_must
    where company_cd = #{companyCd,jdbcType=VARCHAR}
      and priority_order_cd = #{priorityOrderCd,jdbcType=INTEGER}
  </delete>
  <select id="selectMystInfo" resultType="com.trechina.planocycle.entity.vo.PriorityOrderCommodityVO">
      select branch,branchs."2"  as branchName,jan_new as jan,jans."2" as janName,'' as errMsg
      from priority.work_priority_order_commodity_must musts
             left join "1000".prod_0000_jan_info jans
                       on musts.jan_new = jans."1"
             left join "1000".ten_0000_ten_info branchs
                       on  musts.branch = split_part(branchs."1", '_', 2) and branchs."1" like #{companyCd} ||'_%'
      where musts.company_cd = #{companyCd,jdbcType=VARCHAR}
      and priority_order_cd = #{priorityOrderCd,jdbcType=INTEGER}
    </select>
    <insert id="insert" parameterType="com.trechina.planocycle.entity.po.PriorityOrderCommodityMust">
    insert into priority.work_priority_order_commodity_must (company_cd, priority_order_cd, branch,
      jan_new)
    values
    <foreach collection="lists" item="list" separator=",">
    <if test="list.companyCd!=null and list.priorityOrderCd!=null and list.branch!=null and list.jan!=null">
    (#{list.companyCd,jdbcType=VARCHAR}, #{list.priorityOrderCd,jdbcType=INTEGER}, #{list.branch,jdbcType=VARCHAR},
      #{list.jan,jdbcType=VARCHAR})
    </if>
    </foreach>
  </insert>
    <insert id="insertPriorityBranchNum">
      insert into priority.priority_order_branch_num
      values
        <foreach collection="lists" item="list" separator=",">
        (#{companyCd,jdbcType=VARCHAR},#{priorityOrderCd,jdbcType=INTEGER},0,#{list.jan,jdbcType=VARCHAR},
         #{list.num,jdbcType=INTEGER}::Integer)
        </foreach>
    </insert>
  <select id="selectMustJan" resultType="map">
    select jan_new,branch
    from priority.priority_order_commodity_must comm_must
    where not exists(select * from priority.priority_order_commodity_not comm_not
                     where comm_must.company_cd = comm_not.company_cd
                       and comm_not.jan_new = comm_must.jan_new and comm_not.branch = comm_must.branch
                       and comm_not.priority_order_cd = #{priorityOrderCd} and flag=1
                       and comm_not.shelf_pattern_cd = comm_must.shelf_pattern_cd)
      and company_cd = #{companyCd}
      and priority_order_cd = #{priorityOrderCd}
      and shelf_pattern_cd=#{shelfPatternCd}
      and branch=any(string_to_array(#{branchList},',')) and flag=1
  </select>
  <select id="selectCountMustJan" resultType="int">
    select count(distinct branch)
    from priority.priority_order_commodity_must comm_must
    where company_cd = #{companyCd} and priority_order_cd = #{priorityOrderCd} and shelf_pattern_cd=#{shelfPatternCd} and flag=1
  </select>
</mapper>
