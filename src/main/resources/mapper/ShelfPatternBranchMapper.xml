<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.trechina.planocycle.mapper.ShelfPatternBranchMapper">
  <resultMap id="BaseResultMap" type="com.trechina.planocycle.entity.po.ShelfPatternBranch">
    <id column="shelf_pattern_cd" jdbcType="INTEGER" property="shelfPatternCd" />
    <result column="branch" jdbcType="VARCHAR" property="branch" />
    <result column="start_time" jdbcType="TIMESTAMP" property="startTime" />
  </resultMap>
  <sql id="Base_Column_List">
    shelf_pattern_cd, branch, start_time
  </sql>
  <update id="deleteBranchCd">
    update  planocycle.shelf_pattern_branch
    set edit_time=now(),editer_cd=#{authorCd},deleteflg=1
    where shelf_pattern_cd = #{shelfPatternCd,jdbcType=INTEGER} and branch in
        <foreach collection="branchList" item="branch" separator=","  close=")" open="(">
          #{branch}
        </foreach>
  </update>
  <delete id="deleteByPatternCd">
    delete from planocycle.shelf_pattern_branch
    where shelf_pattern_cd = #{shelfPatternCd,jdbcType=INTEGER}
  </delete>
  <select id="selectByPrimaryKey" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from planocycle.shelf_pattern_branch
    where shelf_pattern_cd = #{shelfPatternCd,jdbcType=INTEGER} and deleteflg=0
  </select>
  <select id="getShelfPatternBranch" resultType="string">
    select branch
    from planocycle.shelf_pattern_branch
    where shelf_pattern_cd=#{id} and deleteflg=0
  </select>
    <select id="getBranch" resultType="com.trechina.planocycle.entity.dto.ShelfPatternBranchDto">
      select concat(company_cd,'_',branch_cd) as id,branch_name as name
        from masterdb.branchs
    where company_cd = #{companyCd}
    </select>
  <select id="getPatternBranch" resultType="com.trechina.planocycle.entity.po.ShelfPatternBranch">
    select branch,shelf_pattern_cd
    from planocycle.shelf_pattern_branch
    where  deleteflg=0 and shelf_pattern_cd in
    <foreach collection="list" separator="," index="index" open="(" close=")" item="item">
      #{item}
    </foreach>
  </select>
  <update id="deleteByPrimaryKey" parameterType="map">
    update  planocycle.shelf_pattern_branch
    set edit_time=now(),editer_cd=#{authorCd},deleteflg=1
    where shelf_pattern_cd = #{shelfPatternCd,jdbcType=INTEGER}
  </update>
  <update id="setDelFlg">
    update  planocycle.shelf_pattern_branch
    set edit_time=now(),editer_cd=#{authorCd},deleteflg=0
    where shelf_pattern_cd = #{shelfPatternCd,jdbcType=INTEGER}  and  deleteflg=1 and branch=#{branch}
  </update>
  <insert id="insert" parameterType="com.trechina.planocycle.entity.po.ShelfPatternBranch">
    insert into planocycle.shelf_pattern_branch (shelf_pattern_cd,
      branch, start_time,create_time,author_cd)
    values
    <foreach collection="lists" item="list" separator=",">
     ( #{list.shelfPatternCd,jdbcType=INTEGER},
      #{list.branch,jdbcType=VARCHAR}, #{list.startTime,jdbcType=TIMESTAMP},now(),#{authorCd})
    </foreach>
  </insert>
  <select id="selectAllPatternBranch" resultType="map">
    select * from (select branch_name, case when position('_' in branch)>0 then split_part(branch, '_', 2)  else branch end as  branch,
           shelf_pattern_name,shelf_pattern_cd,"storeIsCore",row_number() over(partition by branch order by round("storeIsCore") desc) as row from(
        <foreach collection="tenTableName" item="storeIsCore" index="branch" separator=" union all ">
          select "2" branch_name, "1" branch, shelf_pattern_name,patternmst.shelf_pattern_cd,${storeIsCore} "storeIsCore" from ${branch} branchmst
          INNER JOIN planocycle.shelf_pattern_branch patternbranch ON branchmst."1" = patternbranch.branch
          INNER JOIN planocycle.shelf_pattern_mst patternmst ON patternmst.shelf_pattern_cd = patternbranch.shelf_pattern_cd
          where patternmst.shelf_pattern_cd=#{shelfPatternCd} and company_cd=#{companyCd}
        </foreach>
      )tmp) tmp1 where row&lt;=1
  </select>
</mapper>
