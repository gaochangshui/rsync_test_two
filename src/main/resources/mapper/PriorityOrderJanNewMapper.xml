<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.trechina.planocycle.mapper.PriorityOrderJanNewMapper">
  <resultMap id="BaseResultMap" type="com.trechina.planocycle.entity.po.PriorityOrderJanNew">
    <id column="company_cd" jdbcType="VARCHAR" property="companyCd" />
    <id column="priority_order_cd" jdbcType="INTEGER" property="priorityOrderCd" />
    <id column="jan_new" jdbcType="VARCHAR" property="janNew" />
    <result column="rank" jdbcType="INTEGER" property="rank" />
    <result column="branch_num" jdbcType="INTEGER" property="branchNum" />
    <result column="branch_account" jdbcType="NUMERIC" property="branchAccount" />
  </resultMap>
  <insert id="insert" parameterType="com.trechina.planocycle.entity.po.PriorityOrderJanNew">
    insert into planocycle.work_priority_order_jan_new (priority_order_cd,company_cd, jan_new,
      jan_rank,author_cd)
    values
           <foreach collection="lists" separator="," item="list">
           (#{list.priorityOrderCd},#{list.companyCd,jdbcType=VARCHAR}, trim(#{list.janNew,jdbcType=VARCHAR}),
            #{list.rank} :: integer,#{authorCd})
           </foreach>
  </insert>

    <insert id="setJanNewInfo" parameterType="com.trechina.planocycle.entity.vo.JanMstPlanocycleVo">
        insert into masterdb.jan_mst_planocycle(company_cd,jan_cd,jan_nm,tanka,tanni,width,height,scat1cd,scat2cd,scat3cd,scat4cd,scatnm,pkg,alcohol,brand
        ,scat1cd_val,scat2cd_val,scat3cd_val,scat4cd_val,kikaku,irisu,depth
        )
        values
            <foreach collection="list" item="item" separator=",">
                (trim(#{companyCd}),trim(#{item.janCd}),trim(#{item.janName}),trim(#{item.tanka}) :: integer,trim(#{item.tanni})
                ,trim(#{item.width}) :: integer,trim(#{item.height}) :: integer,
                 lpad(trim(#{item.zokusei1}),4,'0'),
                 lpad(trim(#{item.zokusei2}),4,'0'),
                lpad(trim(#{item.zokusei3}),4,'0'),
                 <choose>
                   <when test="item.zokusei4 != null and item.zokusei4 != ''">
                       lpad(trim(#{item.zokusei4}),4,'0')
                   </when>
                    <otherwise>
                        null
                    </otherwise>
                 </choose>
                ,trim(#{item.scatnm}),trim(#{item.zokusei5}),trim(#{item.zokusei8}),trim(#{item.zokusei9})
                ,lpad(trim(#{item.zokusei1}),4,'0'),
                 lpad(trim(#{item.zokusei1}),4,'0') || '_' || lpad(trim(#{item.zokusei2}),4,'0'),
                 lpad(trim(#{item.zokusei1}),4,'0') || '_' || lpad(trim(#{item.zokusei2}),4,'0') || '_' || lpad(trim(#{item.zokusei3}),4,'0'),
                 <choose>
                     <when test="item.zokusei4 != null and item.zokusei4 != ''">
                         lpad(trim(#{item.zokusei1}),4,'0') || '_' || lpad(trim(#{item.zokusei2}),4,'0') || '_' || lpad(trim(#{item.zokusei3}),4,'0') || '_' || lpad(trim(#{item.zokusei4}),4,'0')

                     </when>
                     <otherwise>
                         null
                     </otherwise>
                 </choose>
                ,trim(#{item.zokusei6} ):: integer
                 ,trim(#{item.zokusei7}):: integer ,trim(#{item.depth}) :: integer
                )
            </foreach>
    </insert>
    <insert id="setWorkForFinal">
        insert into planocycle.work_priority_order_jan_new(priority_order_cd,company_cd,author_cd,jan_new,jan_rank)
        select priority_order_cd,company_cd,#{authorCd},jan_new,jan_rank
        from planocycle.priority_order_jan_new
        where company_cd = #{companyCd,jdbcType=VARCHAR}
          and priority_order_cd = #{priorityOrderCd,jdbcType=INTEGER}
    </insert>
    <delete id="workDelete">
        delete from planocycle.work_priority_order_jan_new
        where company_cd = #{companyCd,jdbcType=VARCHAR}
          and priority_order_cd = #{priorityOrderCd,jdbcType=INTEGER}

    </delete>

    <select id="selectJanNew" resultType="map">
        select news.jan_new as "janCd","2" as "janName",news.jan_rank as "rank"
        <foreach collection="attrList" item="item1" open="," separator=",">
            <if test="item1.zokuseiCol > (allCdList[allCdList.size-1])">"${item1.zokuseiCol}"</if>
            <if test="item1.zokuseiCol &lt;= (allCdList[allCdList.size-1])">
                <foreach collection="allCdList" item="item2" separator="|| '_' ||">
                    <if test="item2 &lt;= item1.zokuseiCol">
                        "${item2}"
                    </if>
                </foreach>
            </if>
            as "zokusei${item1.zokuseiId}"
        </foreach>
        ,
        <foreach collection="attrName" separator="," item="item" index="index">
            "${item.zokusei_col}" as "zokuseiName${item.zokusei_id}"
        </foreach>
        ,case when rep.jan_new is not null then 'すでにJAN変商品として入力済みです。'
        when repold.jan_old is not null then 'すでにJAN変商品として入力済みです。'
        else '' end as "errMsg"
        from planocycle.work_priority_order_jan_new news
        left join  ${proInfoTable} jans
        on news.jan_new = jans."1"
        left join planocycle.work_priority_order_jan_replace rep
        on news.company_cd = rep.company_cd
        and news.jan_new = rep.jan_new
        and news.priority_order_cd = rep.priority_order_cd
        left join planocycle.work_priority_order_jan_replace repold
        on news.company_cd = repold.company_cd
        and news.jan_new = repold.jan_old
        and news.priority_order_cd = repold.priority_order_cd
        where news.company_cd = #{companyCd,jdbcType=VARCHAR}
        and news.priority_order_cd = #{priorityOrderCd,jdbcType=INTEGER}
        order by "janCd"
  </select>

    <select id="getProductPowerData" resultType="map">
        select * from (select jandata.jan as "janCd","2" as "janName"
        <foreach collection="attrList" item="item1" open="," separator=",">
            <if test="item1.zokuseiCol > (allCdList[allCdList.size-1])">"${item1.zokuseiCol}"</if>
            <if test="item1.zokuseiCol &lt;= (allCdList[allCdList.size-1])">
                <foreach collection="allCdList" item="item2" separator="|| '_' ||">
                    <if test="item2 &lt;= item1.zokuseiCol">
                        "${item2}"
                    </if>
                </foreach>
            </if>
            as "zokusei${item1.zokuseiId}"
        </foreach>
        ,
        <foreach collection="attrName" separator="," item="item" index="index">
            "${item.zokusei_col}" as "zokuseiName${item.zokusei_id}"
        </foreach>
        ,coalesce (prodata.rank_result,9999) as rank
        from planocycle.shelf_pts_data ptsdata
        left join planocycle.shelf_pts_data_jandata jandata
        on ptsdata.id = jandata.pts_cd
        left join planocycle.product_power_mst_data prodata
        on prodata.jan = jandata.jan and prodata.product_power_cd = #{productPowerCd}
        left join ${proInfoTable} janinfo
        on janinfo."1" = jandata.jan
        where ptsdata.shelf_pattern_cd = #{shelfPatternCd,jdbcType=INTEGER}) mst
        where
              <foreach collection="mapAttr" separator=" and " item="item" index="index" >
                  mst.${index} = #{item}
              </foreach>

    </select>
    <select id="getJanNewInfo" resultType="com.trechina.planocycle.entity.vo.JanMstPlanocycleVo">
        select jan_cd as janCd,jan_nm as janName,tanka,tanni,width,height,depth,scatnm,scat1cd as zokusei1,scat2cd as zokusei2,scat3cd as zokusei3
             ,scat4cd as zokusei4,pkg as zokusei5,kikaku as zokusei6,irisu as zokusei7,alcohol as zokusei8,brand as zokusei9
        from masterdb.jan_mst_planocycle
        where company_cd = #{companyCd}
        order by jan_cd
    </select>
    <select id="getDynamicJanNameClassify" resultType="map">
        select "1" as "janCd","2" as "janName"
        <foreach collection="attrList" item="item1" open="," separator=",">
            <if test="item1.zokuseiCol > (allCdList[allCdList.size-1])">"${item1.zokuseiCol}"</if>
            <if test="item1.zokuseiCol &lt;= (allCdList[allCdList.size-1])">
                <foreach collection="allCdList" item="item2" separator="|| '_' ||">
                    <if test="item2 &lt;= item1.zokuseiCol">
                        "${item2}"
                    </if>
                </foreach>
            </if>
            as "zokusei${item1.zokuseiId}"
        </foreach>
        ,
        <foreach collection="attrName" separator="," item="item" index="index">
            "${item.zokusei_col}" as "zokuseiName${item.zokusei_id}"
        </foreach>
        <if test="model == 0">
            ,case when rep.jan_new is not null then 'すでにJAN変商品として入力済みです。'
            when repold.jan_old is not null then 'すでにJAN変商品として入力済みです。'
            else '' end as "errMsg"
        </if>
        <if test="model == 2">
            ,case when rep.jan_new is not null then 'すでにJAN変商品として入力済みです。'
            when repold.jan_old is not null then 'すでにJAN変商品として入力済みです。'
                when news.jan_new is not null then 'すでに新規商品として入力済みです'
            else '' end as "errMsg"
        </if>
        from ${proInfoTable} info
        <if test="model == 0">
        left join planocycle.work_priority_order_jan_replace rep
        on  info."1" = rep.jan_new
        and  rep.priority_order_cd = #{priorityOrderCd}
        left join planocycle.work_priority_order_jan_replace repold
        on  info."1" = repold.jan_old
        and  repold.priority_order_cd = #{priorityOrderCd}
        </if>
        <if test="model == 2">
            left join planocycle.work_priority_order_jan_replace rep
            on  info."1" = rep.jan_new
            and  rep.priority_order_cd = #{priorityOrderCd}
            left join planocycle.work_priority_order_jan_replace repold
            on  info."1" = repold.jan_old
            and  repold.priority_order_cd = #{priorityOrderCd}
            left join planocycle.work_priority_order_jan_new news
            on  info."1" = news.jan_new
            and  news.priority_order_cd = #{priorityOrderCd}
        </if>
        where "1" in
        <foreach collection="janCd" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>

    </select>
    <select id="getErrorMsgJan" resultType="java.lang.String">
        SELECT jan_new as jan_new
        from planocycle.work_priority_order_jan_replace
        where priority_order_cd = #{priorityOrderCd}
        union
        SELECT jan_old as jan_new
        from planocycle.work_priority_order_jan_replace
              where   priority_order_cd = #{priorityOrderCd}
    </select>
    <select id="getProductPowerDataList" resultType="java.util.Map">
        select jandata.jan as "janCd","2" as "janName"
        <foreach collection="attrList" item="item1" open="," separator=",">
            <if test="item1.zokuseiCol > (allCdList[allCdList.size-1])">"${item1.zokuseiCol}"</if>
            <if test="item1.zokuseiCol &lt;= (allCdList[allCdList.size-1])">
                <foreach collection="allCdList" item="item2" separator="|| '_' ||">
                    <if test="item2 &lt;= item1.zokuseiCol">
                        "${item2}"
                    </if>
                </foreach>
            </if>
            as "zokusei${item1.zokuseiId}"
        </foreach>
        ,
        <foreach collection="attrName" separator="," item="item" index="index">
            "${item.zokusei_col}" as "zokuseiName${item.zokusei_id}"
        </foreach>
        ,coalesce (prodata.rank_result,9999) as rank
        from planocycle.shelf_pts_data ptsdata
        left join planocycle.shelf_pts_data_jandata jandata
        on ptsdata.id = jandata.pts_cd
        left join planocycle.product_power_mst_data prodata
        on prodata.jan = jandata.jan and prodata.product_power_cd = #{productPowerCd}
        left join ${proInfoTable} janinfo
        on janinfo."1" = jandata.jan
        where ptsdata.shelf_pattern_cd = #{shelfPatternCd,jdbcType=INTEGER}
    </select>
    <delete id="deleteByAuthorCd">
        delete from planocycle.priority_order_jan_new where
        company_cd = #{companyCd,jdbcType=VARCHAR} and priority_order_cd = #{priorityOrderCd,jdbcType=INTEGER}
        and author_cd=#{authorCd}
    </delete>
    <delete id="deleteJanNewInfo">
        delete from masterdb.jan_mst_planocycle where company_cd = #{companyCd}
    </delete>
    <delete id="deleteFinalJanNewInfo">
        delete from masterdb.jan_mst_planocycle where company_cd = #{companyCd} and priority_order_cd = #{priorityOrderCd}
    </delete>
    <insert id="insertBySelect">
        insert into planocycle.priority_order_jan_new(priority_order_cd,company_cd,author_cd,jan_new,jan_rank,create_time,edit_time,editer_cd)
        select priority_order_cd,company_cd,#{authorCd},jan_new,jan_rank,now(),now(),#{authorCd}
        from planocycle.work_priority_order_jan_new
        where company_cd = #{companyCd,jdbcType=VARCHAR}
        and priority_order_cd = #{priorityOrderCd,jdbcType=INTEGER}
    </insert>

</mapper>
