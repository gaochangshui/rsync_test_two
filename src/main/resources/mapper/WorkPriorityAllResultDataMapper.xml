<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.trechina.planocycle.mapper.WorkPriorityAllResultDataMapper">


    <insert id="insertWKTableResultData">
        insert into planocycle.work_all_pattern_restrict_result_data(shelf_pattern_cd,company_cd,author_cd,restrict_cd,face,face_fact,jan,sku_rank,priority_all_cd)
        values
    <foreach collection="janList" item="item" separator=",">
        (#{patternCd},#{companyCd},#{authorCd},#{item.restrictCd},#{item.faceNum},#{item.faceNum},#{item.janCd},#{item.rank},#{priorityAllCd})
    </foreach>
    </insert>
    <delete id="deleteWKTableResultData">
        delete from planocycle.work_all_pattern_restrict_result_data
        where priority_all_cd = #{priorityAllCd}
        and company_cd = #{companyCd,jdbcType=VARCHAR}
        and author_cd = #{authorCd,jdbcType=VARCHAR}
    </delete>
    <select id="getResultJans" resultType="com.trechina.planocycle.entity.dto.PriorityOrderResultDataDto">
        select restrict_cd restrictCd,tai_cd taiCd,tana_cd tanaCd,tana_type tanaType,sku_rank skuRank,COALESCE(jan.irisu, jan2.irisu) irisu,data.jan_cd janCd,
        face_sku faceSku,face_keisan faceKeisan,face,adopt_flag adoptFlag,
        COALESCE(jan.width, jan2.width) as janWidth,COALESCE(jan.height, jan2.height) janHeight, sort_rank sortRank,
        case when jan3.jan_new is null then 2 else 1 end newRank
        from planocycle.work_priority_all_result_data data
        left join masterdb.jan_mst jan on data.jan_cd=jan.jan_cd
        left join masterdb.jan_mst_planocycle jan2 on data.jan_cd=jan2.jan_cd
        left join planocycle.priority_order_jan_new jan3 on data.jan_cd=jan3.jan_new
        and jan3.company_cd=data.company_cd and jan3.priority_order_cd=#{priorityOrderCd}
        where data.company_cd=#{companyCd} and data.author_cd=#{authorCd} and priority_all_cd=#{priorityAllCd}
        and shelf_patten_cd=#{patternCd}
    </select>
    <select id="getJans" resultType="java.lang.String">
        select array_to_string(array_agg(DISTINCT jan_cd),',')
        from planocycle.work_priority_all_result_data
        where priority_all_cd = #{priorityAllCd} and company_cd = #{companyCd} and shelf_patten_cd = #{patternCd} and author_cd = #{authorCd}
    </select>
    <select id="getAvgSalesCunt" resultType="java.lang.Double">
        select avg(sales_cnt)
        FROM planocycle.work_priority_all_result_data
        where priority_all_cd = #{priorityAllCd} and company_cd = #{companyCd} and shelf_patten_cd = #{patternCd} and author_cd = #{authorCd}
    </select>
    <select id="getResultDatas" resultType="com.trechina.planocycle.entity.dto.PriorityAllResultDataDto">
        select jan_cd ,sales_cnt
        from planocycle.work_priority_all_result_data
        where company_cd = #{companyCd,jdbcType=VARCHAR}
          and author_cd = #{authorCd,jdbcType=VARCHAR}
          and priority_all_cd = #{priorityAllCd}
          and shelf_patten_cd = #{patternCd}
    </select>
    <select id="getReorder" resultType="com.trechina.planocycle.entity.po.WorkPriorityOrderResultData">
        select  resultdata.jan as janCd,avgattr1,row_number() over(order by avgattr1
        <if test="sortName2 != null">
            ,avgattr2
        </if>
        ,rank_result,resultdata.jan) as resultRank
        from  planocycle.work_all_pattern_restrict_result_data resultdata
        left join planocycle.product_power_mst_data promst
        on promst.jan = resultdata.jan and promst.product_power_cd = #{productPowerCd}
        left join "${commonTableName.prodIsCore}".prod_${commonTableName.prodMstClass}_jan_info attrmst
        on attrmst."1" = promst.jan
        left join (
        select attrmst."${sortName1}",avg(promst.rank_result) as avgattr1
        from planocycle.product_power_mst_data promst
        left join "${commonTableName.prodIsCore}".prod_${commonTableName.prodMstClass}_jan_info attrmst
        on attrmst."1" = promst.jan
        where promst.product_power_cd = #{productPowerCd}
        GROUP BY attrmst."${sortName1}"
        ) attr1
        on attr1."${sortName1}" = attrmst."${sortName1}"
        <if test="sortName2 != null">
            left join (
            select attrmst."${sortName2}",avg(promst.rank_result) as avgattr2
            from planocycle.product_power_mst_data promst
            left join "${commonTableName.prodIsCore}".prod_${commonTableName.prodMstClass}_jan_info attrmst
            on attrmst."1" = promst.jan
            where promst.product_power_cd = #{productPowerCd}
            GROUP BY attrmst."${sortName2}"
            )attr2
            on attr2."${sortName2}" = attrmst."${sortName2}"
        </if>

        where resultdata.priority_all_cd  = #{priorityAllCd} and resultdata.shelf_pattern_cd = #{patternCd} and resultdata.author_cd = #{authorCd}
    </select>

    <update id="updateTaiTanaBatch">
        UPDATE planocycle.work_priority_all_result_data SET
        tai_cd =
        CASE concat(jan_cd,restrict_cd)
        <foreach collection="list" item="obj">
            WHEN concat(#{obj.janCd},#{obj.restrictCd}) THEN #{obj.taiCd}
        </foreach>
        ELSE tai_cd
        END,
        tana_cd =
        CASE concat(jan_cd,restrict_cd)
        <foreach collection="list" item="obj">
            WHEN concat(#{obj.janCd},#{obj.restrictCd}) THEN #{obj.tanaCd}
        </foreach>
        ELSE tana_cd
        END,
        tana_type =
        CASE concat(jan_cd,restrict_cd)
        <foreach collection="list" item="obj">
            WHEN concat(#{obj.janCd},#{obj.restrictCd}) THEN #{obj.tanaType}
        </foreach>
        ELSE tana_type
        END,
        adopt_flag =
        CASE concat(jan_cd,restrict_cd)
        <foreach collection="list" item="obj">
            WHEN concat(#{obj.janCd},#{obj.restrictCd}) THEN #{obj.adoptFlag}
        </foreach>
        ELSE adopt_flag
        END,
        face_fact =
        CASE concat(jan_cd,restrict_cd)
        <foreach collection="list" item="obj">
            WHEN concat(#{obj.janCd},#{obj.restrictCd}) THEN #{obj.faceFact}
        </foreach>
        ELSE face_fact
        END
        WHERE jan_cd IN
        <foreach collection="list" item="obj" separator="," open="(" close=")">
            #{obj.janCd}
        </foreach>
        and company_cd=#{companyCd} and author_cd=#{authorCd} and priority_all_cd = #{priorityAllCd} and shelf_patten_cd=#{patternCd}
    </update>
    <update id="update">
        <foreach collection="list" item="item" separator=";" index="index">
            update planocycle.work_priority_all_result_data
            <set>
                sales_cnt = #{item.salesCnt} ::numeric
            </set>
            where jan_cd = #{item.janCd} ::varchar and company_cd = #{companyCd} and author_cd = #{authorCd} and priority_all_cd = #{priorityAllCd}
            and shelf_patten_cd = #{patternCd}
        </foreach>
    </update>
    <update id="updateFace">
        <foreach collection="list" item="item" separator=";" index="index">
            update planocycle.work_priority_all_result_data
            <set>
                face = #{item.faceNum},face_keisan = #{item.faceNum}
            </set>
            where jan_cd = #{item.janCd} ::varchar and company_cd = #{item.companyCd} and author_cd = #{item.authorCd} and priority_all_cd = #{item.priorityAllCd}
            and shelf_patten_cd=#{item.shelfPatternCd}
        </foreach>
    </update>
    <update id="setSortRank">
        update planocycle.work_all_pattern_restrict_result_data
        set sku_rank =
        CASE jan
        <foreach collection="list" item="item">
            WHEN #{item.janCd} THEN #{item.resultRank}
        </foreach>
        ELSE sku_rank end
        where  company_cd = #{companyCd} and author_cd = #{authorCd} and priority_all_cd = #{priorityAllCd}
        and shelf_pattern_cd=#{patternCd}
    </update>
</mapper>