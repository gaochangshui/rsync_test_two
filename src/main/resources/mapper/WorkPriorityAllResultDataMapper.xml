<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.trechina.planocycle.mapper.WorkPriorityAllResultDataMapper">


    <insert id="insertWKTableResultData">
        insert into planocycle.work_priority_all_result_data
        select #{priorityAllCd} as priority_all_cd, basic.company_cd, #{authorCd,jdbcType=VARCHAR} as author_cd, #{patternCd}, restrict_cd, jan_cd, sku_rank, 0, face, face_sku, irisu, null, null, null, face_keisan, sales_cnt,null,sort_rank
        from planocycle.priority_order_result_data basic
        inner join planocycle.work_priority_all_shelfs shelfs
            on shelfs.priority_all_cd = #{priorityAllCd}
            and shelfs.company_cd = #{companyCd,jdbcType=VARCHAR}
            and shelfs.author_cd = #{authorCd,jdbcType=VARCHAR}
            and shelfs.shelf_patten_cd = #{patternCd,jdbcType=VARCHAR}
        where basic.priority_order_cd = #{priorityOrderCd}
        order by shelfs.shelf_patten_cd
    </insert>
    <delete id="deleteWKTableResultData">
        delete from planocycle.work_priority_all_result_data
        where priority_all_cd = #{priorityAllCd}
        and company_cd = #{companyCd,jdbcType=VARCHAR}
        and author_cd = #{authorCd,jdbcType=VARCHAR}
    </delete>
    <select id="getResultJans" resultType="com.trechina.planocycle.entity.dto.PriorityOrderResultDataDto">
        select restrict_cd restrictCd,tai_cd taiCd,tana_cd tanaCd,tana_type tanaType,sku_rank skuRank,jan.irisu,data.jan_cd janCd,
        face_sku faceSku,face_keisan faceKeisan,face,adopt_flag adoptFlag,
        COALESCE(jan.width, jan2.width) as janWidth,COALESCE(jan.height, jan2.height) janHeight, sort_rank sortRank
        from planocycle.work_priority_all_result_data data
        left join masterdb.jan_mst jan on data.jan_cd=jan.jan_cd
        left join masterdb.jan_mst_planocycle jan2 on data.jan_cd=jan2.jan_cd
        where data.company_cd=#{companyCd} and data.author_cd=#{authorCd} and priority_all_cd=#{priorityAllCd}
        and shelf_patten_cd=#{patternCd}
    </select>
    <select id="getJans" resultType="java.lang.String">
        select array_to_string(array_agg(DISTINCT jan_cd),',')
        from planocycle.work_priority_all_result_data
        where priority_all_cd = #{priorityAllCd} and company_cd = #{companyCd} and shelf_patten_cd = #{patternCd} and author_cd = #{authorCd}
    </select>
    <select id="getAvgSalesCunt" resultType="java.lang.Double">
        select avg(sales_cnt)
        FROM planocycle.work_priority_all_result_data
        where priority_all_cd = #{priorityAllCd} and company_cd = #{companyCd} and shelf_patten_cd = #{patternCd} and author_cd = #{authorCd}
    </select>
    <select id="getResultDatas" resultType="com.trechina.planocycle.entity.dto.PriorityAllResultDataDto">
        select jan_cd ,sales_cnt as salesCnt
        from planocycle.work_priority_all_result_data
        where company_cd = #{companyCd,jdbcType=VARCHAR}
          and author_cd = #{authorCd,jdbcType=VARCHAR}
          and priority_all_cd = #{priorityAllCd}
          and shelf_patten_cd = #{patternCd}
    </select>

    <update id="updateTaiTanaBatch">
        UPDATE planocycle.work_priority_all_result_data SET
        tai_cd =
        CASE concat(jan_cd,restrict_cd)
        <foreach collection="list" item="obj">
            WHEN concat(#{obj.janCd},#{obj.restrictCd}) THEN #{obj.taiCd}
        </foreach>
        ELSE tai_cd
        END,
        tana_cd =
        CASE concat(jan_cd,restrict_cd)
        <foreach collection="list" item="obj">
            WHEN concat(#{obj.janCd},#{obj.restrictCd}) THEN #{obj.tanaCd}
        </foreach>
        ELSE tana_cd
        END,
        tana_type =
        CASE concat(jan_cd,restrict_cd)
        <foreach collection="list" item="obj">
            WHEN concat(#{obj.janCd},#{obj.restrictCd}) THEN #{obj.tanaType}
        </foreach>
        ELSE tana_type
        END,
        adopt_flag =
        CASE concat(jan_cd,restrict_cd)
        <foreach collection="list" item="obj">
            WHEN concat(#{obj.janCd},#{obj.restrictCd}) THEN #{obj.adoptFlag}
        </foreach>
        ELSE adopt_flag
        END,
        face_fact =
        CASE concat(jan_cd,restrict_cd)
        <foreach collection="list" item="obj">
            WHEN concat(#{obj.janCd},#{obj.restrictCd}) THEN #{obj.faceFact}
        </foreach>
        ELSE face_fact
        END
        WHERE jan_cd IN
        <foreach collection="list" item="obj" separator="," open="(" close=")">
            #{obj.janCd}
        </foreach>
        and company_cd=#{companyCd} and author_cd=#{authorCd} and priority_all_cd = #{priorityAllCd} and shelf_patten_cd=#{patternCd}
    </update>
    <update id="update">
        <foreach collection="list" item="item" separator=";" index="index">
            update planocycle.work_priority_all_result_data
            <set>
                sales_cnt = #{item.salesCnt} ::numeric
            </set>
            where jan_cd = #{item.janCd} ::varchar and company_cd = #{companyCd} and author_cd = #{authorCd} and priority_all_cd = #{priorityAllCd}
            and shelf_patten_cd = #{patternCd}
        </foreach>
    </update>
    <update id="updateFace">
        <foreach collection="list" item="item" separator=";" index="index">
            update planocycle.work_priority_all_result_data
            <set>
                face = #{item.faceNum},face_keisan = #{item.faceNum}
            </set>
            where jan_cd = #{item.janCd} ::varchar and company_cd = #{item.companyCd} and author_cd = #{item.authorCd} and priority_all_cd = #{item.priorityAllCd}
            and shelf_patten_cd=#{item.shelfPatternCd}
        </foreach>
    </update>
</mapper>