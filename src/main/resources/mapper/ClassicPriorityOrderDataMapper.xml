<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.trechina.planocycle.mapper.ClassicPriorityOrderDataMapper">
    <update id="dropTempData">
    DROP TABLE IF EXISTS ${tablename};
    </update>
    <update id="updateTempData">
    create table ${tablename} (
    <foreach collection="lists" separator="," item="list">
        <choose>
            <when test="list.name == 'branch_num' || list.name == 'rank' || list.name == 'rank_prop' || list.name == 'rank_upd' || list.name == 'goods_rank' ">
                ${list.name}  integer
            </when>
            <when test="list.name == 'pos_amount' ">
                ${list.name}  bigint
            </when>
            <otherwise>
                ${list.name} character varying
            </otherwise>
        </choose>
    </foreach>
    );
  </update>
    <update id="updatePriorityOrderDataForCard">
        update ${tablename}
        set rank_upd = 99999999
        from(
            select card.jan_old ,card.company_cd,card.priority_order_cd
            from ${tablename} tmp
            inner join priority.work_priority_order_jan_card card
            on tmp.jan_old = card.jan_old
        )as reptable
        where  reptable.company_cd = #{companyCd,jdbcType=VARCHAR}
          and reptable.priority_order_cd = #{priorityOrderCd}
        and ${tablename}.jan_old = reptable.jan_old
    </update>
    <update id="updatePriorityOrderDataForJanNew">
        update ${tablename}
        set jan_new = reptable.jan_new
        from (
            select rep.jan_old,rep.jan_new,rep.company_cd,rep.priority_order_cd
             from ${tablename} tmp
            inner join priority.priority_order_jan_replace rep
            on tmp.jan_old = rep.jan_old
            ) as reptable
        where reptable.company_cd = #{companyCd,jdbcType=VARCHAR}
          and reptable.priority_order_cd = #{priorityOrderCd}
          and ${tablename}.jan_old = reptable.jan_old
    </update>
    <update id="updatePriorityOrderDataForProp">
        update ${tablename}
        set jan_new = reptable.jan_new
        from(
            select pro.jan_old,pro.jan_new,pro.company_cd,pro.priority_order_cd,pro.flag
            from ${tablename} tmp
            inner join priority.work_priority_order_jan_proposal pro
            on tmp.jan_old = pro.jan_old
            ) as reptable
        where not exists (select jan_old from priority.priority_order_jan_replace as rep
                            where rep.jan_old = reptable.jan_old
                        )
          and reptable.company_cd = #{companyCd,jdbcType=VARCHAR}
          and reptable.priority_order_cd = #{priorityOrderCd}
          and ${tablename}.jan_old =reptable.jan_old
          and reptable.flag = 1
    </update>
    <update id="updateGoodsRank">
        update ${tablename}
        set goods_rank=
        CASE jan_new
        <foreach collection="list" item="item">
            WHEN trim(#{item.jan}) THEN #{item.goodsRank}
        </foreach>
        ELSE goods_rank END
    </update>
    <update id="setRank">
        update ${tablename}
        set rank_prop=
        CASE jan_old
        <foreach collection="list" item="item">
            WHEN #{item.jan_old} THEN #{item.rank_prop}
        </foreach>
        ELSE rank END,
        rank=
        CASE jan_old
        <foreach collection="list" item="item">
            WHEN #{item.jan_old} THEN #{item.rank}
        </foreach>
        ELSE rank END,
        rank_upd=
        CASE jan_old
        <foreach collection="list" item="item">
            WHEN #{item.jan_old} THEN #{item.rank_upd}
        </foreach>
        ELSE rank_upd END
        where rank_prop!=99999999
    </update>
    <update id="updateCutJanForProp">
        update ${tablename}
        set rank_prop=0,rank_upd=0
        where rank_prop=99999999
    </update>
    <update id="updateCutJanByJanList">
        update ${tablename}
        set rank_upd=
        case jan_new
        <foreach collection="existJanCut" item="item">
            when #{item.jan} then 99999999
        </foreach>
        else rank_upd end
    </update>
    <update id="updateUPdRank">
        update ${tableName}
        set rank_upd=
        case jan_old
        <foreach collection="janCutList" item="item">
            when #{item} then 99999999
        </foreach>
        else rank_upd end
    </update>
    <update id="updateRevivification">
        update ${tableName}
        set rank_upd= rank_prop
        where rank_upd = 99999999
    </update>
    <select id="selectExistJan" resultType="string">
        select jan_new from ${tableName}
        where
        jan_new in(
        <foreach collection="newJanList" item="item" separator=",">
           #{item.jan}
        </foreach>);
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from priority_order_data
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <select id="selectTempDataCol" resultType="java.util.Map">
        select pub.*,COALESCE(num.branch_nums,0) as branch_num_upd
        from ${tablename} pub
        left join priority.priority_order_branch_num num
        on pub.jan_new = num.jan_news
        and num.priority_order_cd = #{priorityOrderCd}
        <if test="lists!=null">
            order by
            <foreach collection="lists" item="list" separator=",">
                ${list}
            </foreach>
        </if>
    </select>
  <select id="selectTempData" resultType="java.util.Map">
    select * from ${tablename}
    <if test="lists!=null">
    order by
        <foreach collection="lists" item="list" separator=",">
            ${list}
        </foreach>
        ,case rank when -1 then 1 else 2 end  asc
        ,rank_upd
    </if>
      <if test="lists==null">
          order by jan_new
      </if>
  </select>
    <select id="selectTempDataByRankUpd"  resultType="java.util.Map">
        select * from ${tableName}
        <if test="lists!=null">
            order by
            <foreach collection="lists" item="list" separator=",">
                ${list}
            </foreach>

            ,rank_upd
        </if>
        <if test="lists==null">
            order by jan_new
        </if>
    </select>
    <select id="selectTempDataAndMst" resultType="java.util.Map">
      select
            <foreach collection="colName" item="item" separator=",">
             <choose>
                 <when test="item == 'rank'">
                     <if test="orderCol!=null">
                     case mst.rank when -1 then  mst.rank else
                      ROW_NUMBER () OVER (
                         partition by
                         <foreach collection="orderCol" item="list" separator=",">
                             ${list}
                         </foreach>
                         ORDER BY
                         <foreach collection="orderCol" item="list" separator=",">
                             ${list}
                         </foreach>
                        ,mst.branch_num desc ,pos_amount desc ) end AS  rank
                     </if>
                 </when>
                 <when test="item == 'rank_prop'">
                     <if test="orderCol!=null">
                         case mst.rank_prop when 99999999 then  mst.rank_prop  else
                         ROW_NUMBER () OVER (partition by
                         <foreach collection="orderCol" item="list" separator=",">
                             ${list}
                         </foreach>
                         ORDER BY
                         <foreach collection="orderCol" item="list" separator=",">
                             ${list}
                         </foreach>
                         ,mst.goods_rank asc ) end AS rank_prop
                     </if>
                 </when>
                <when test="item == 'rank_upd'">
                    <if test="orderCol!=null">
                        case mst.rank_upd when 99999999 then  mst.rank_upd else
                        ROW_NUMBER () OVER (partition by
                        <foreach collection="orderCol" item="list" separator=",">
                            ${list}
                        </foreach>
                        ORDER BY
                        <foreach collection="orderCol" item="list" separator=",">
                            ${list}
                        </foreach>
                        ,case mst.rank when -1 then 1 else 2 end  asc,mst.goods_rank asc ) end AS rank_upd
                    </if>
                </when>
                 <when test="item == 'branch_num' || item == 'pos_amount'">
                     COALESCE(mst.${item},0)as ${item}
                 </when>
                <otherwise>
                    case COALESCE(mst.${item},'_') when '' then '_' else COALESCE(mst.${item},'_') end as ${item}
                </otherwise>
             </choose>
                ,COALESCE(cast(num.branch_nums as text),mst.branch_num_upd) as branch_num_upd
            </foreach>
        from ${tablename} mst
        left join (select * from priority.priority_order_branch_num  where priority_order_cd = #{priorityOrderCd}) as num
        on mst.jan_new = num.jan_news
        left join (select * from  priority.work_priority_order_jan_new  where priority_order_cd = #{priorityOrderCd}) as jans
        on mst.jan_old = jans.jan_new
        left join (select * from  priority.work_priority_order_jan_card  where priority_order_cd = #{priorityOrderCd}) as cards
        on mst.jan_new = cards.jan_old
        <if test="orderCol!=null">
            order by
            <foreach collection="orderCol" item="list" separator=",">
                ${list}
            </foreach>
            ,rank_upd
        </if>

    </select>
    <select id="selectTempColName" resultType="java.lang.String">
        select column_name from information_schema.columns where table_name=#{tablename}
    </select>
    <select id="selectPriorityAttrCd" resultType="java.lang.String">
        select array_to_string(array_agg(attr_cd),',')  as a from priority.priority_order_mst orders
          inner join planocycle.product_power_mst powers
             on orders.product_power_cd = powers.product_power_cd
          inner join planocycle.product_power_param_attribute attrs
             on powers.product_power_cd = attrs.product_power_cd
        where orders.priority_order_cd =#{priorityNO,jdbcType=INTEGER}
        and orders.company_cd = #{company,jdbcType=VARCHAR}
    </select>
    <select id="selectPriorityAttrName" resultType="java.util.Map">
        SELECT "2" as name,"3" as id,2 as attr_type
        FROM ${tableNameAttr}
        where "4" is not null
        order by "4"::integer
    </select>
    <select id="selectPriorityAttrValue" resultType="java.lang.String">
        select array_to_string(array_agg(attr_value order by attr_cd),',')  as a from priority.priority_order_mst orders
                                                                      inner join planocycle.product_power_mst powers
                                                                                 on orders.product_power_cd = powers.product_power_cd
                                                                      inner join planocycle.product_power_param_attribute attrs
                                                                                 on powers.product_power_cd = attrs.product_power_cd
        where orders.priority_order_cd =#{priorityNO,jdbcType=INTEGER}
          and orders.company_cd = #{company,jdbcType=VARCHAR}
    </select>
    <select id="selectJanName" resultType="java.lang.String">
        select janname from masterdb.jans
        where jan = #{jan_new}
    </select>

    <select id="selectJanNameFromJanNew" resultType="java.lang.String">
        select name_new from priority.work_priority_order_jan_new
        where jan_new = #{jan_new} and company_cd=#{company} and priority_order_cd=#{priorityOrderCd}
    </select>
    <select id="downloadForCsv" resultType="com.trechina.planocycle.entity.dto.DownloadDto">
        select datas.${tai} as taiValue,datas.${tana} as tanaValue,datas.rank_prop,datas.rank,datas.jan_new as jan,classify.tai_cd as taiCd,classify.tana_cd as tanaCd,row_number() over(PARTITION by classify.tai_cd,classify.tana_cd order by datas.rank_upd,datas.goods_rank ) as tanapositionCd

        from (select * from ${tablename} t1
                 where not exists(select * from ${tablename} t2 where t1.jan_new=t2.jan_new and t1.rank_upd>t2.rank_upd)
             ) datas

                 left join priority.work_priority_order_attribute_classify classify
                           on  classify.attr1 = datas.${tai} and classify.attr2 = datas.${tana} and classify.priority_order_cd = #{priorityOrderCd}
            where rank_upd != 99999999

    </select>
    <select id="downloadSavedForCsv" resultType="com.trechina.planocycle.entity.dto.DownloadDto">
        select datas.${tai},datas.${tana},datas.rank_prop,datas.rank,datas.jan_new as jan,a.taiCd,c.tanaCd,row_number() over(PARTITION by datas.${tai},datas.${tana} order by datas.rank_prop,datas.rank ) as tanapositionCd

        from priority.priority_order_result_data datas
                 left join

             (select ${tai},row_number() over( order by ${tai} ) taiCd

              from priority.priority_order_result_data datas1
             where priority_order_cd=#{priorityOrderCd} and company_cd=#{companyCd}
              GROUP BY ${tai}
             ) a
             on a.${tai} = datas.${tai}
                 left join
             (select ${tai},${tana},jan_new,DENSE_RANK() over(PARTITION by ${tai} order by ${tai},${tana} ) tanaCd
              from priority.priority_order_result_data datas1 where priority_order_cd=#{priorityOrderCd} and company_cd=#{companyCd} ) c
             on c.jan_new = datas.jan_new
            where priority_order_cd=#{priorityOrderCd} and company_cd=#{companyCd}
    </select>
    <select id="getGoodsRank" resultType="com.trechina.planocycle.entity.dto.GoodsRankDto">
        select jan_new as jan ,goods_rank from ${tablename}
    </select>
    <select id="getAttrSort" resultType="com.trechina.planocycle.entity.po.PriorityOrderMstAttrSort">
        select "value" from
            priority.priority_order_mst_attrsort
        where priority_order_cd =#{priorityNO,jdbcType=INTEGER}
        and sort != 0
        order by sort

    </select>
    <select id="existJanOld" resultType="string">
        select jan_old from ${tableName} where jan_old in
        <foreach collection="jan" item="obj" open="(" close=")" separator=",">
            #{obj}
        </foreach>
        and rank != -1
    </select>
    <select id="existJanNew" resultType="string">
        select jan_new from ${tableName} where jan_new in
        <foreach collection="jan" item="obj" open="(" close=")" separator=",">
            #{obj}
        </foreach>
        and rank != -1
    </select>
    <select id="getTempDataAndMst" resultType="java.util.Map">
        select
        <foreach collection="colName" item="item" separator=",">
            <choose>
                <when test="item == 'rank'">
                    <if test="orderCol!=null">
                        case mst.rank when -1 then  mst.rank else
                        ROW_NUMBER () OVER (
                        partition by
                        <foreach collection="orderCol" item="list" separator=",">
                            ${list}
                        </foreach>
                        ORDER BY
                        <foreach collection="orderCol" item="list" separator=",">
                            ${list}
                        </foreach>
                        ,mst.rank ) end AS  rank
                    </if>
                </when>
                <when test="item == 'rank_prop'">
                    <if test="orderCol!=null">
                        case mst.rank_prop when 99999999 then  mst.rank_prop  else
                        ROW_NUMBER () OVER (partition by
                        <foreach collection="orderCol" item="list" separator=",">
                            ${list}
                        </foreach>
                        ORDER BY
                        <foreach collection="orderCol" item="list" separator=",">
                            ${list}
                        </foreach>
                        ,mst.rank_prop asc ) end AS rank_prop
                    </if>
                </when>
                <when test="item == 'rank_upd'">
                    <if test="orderCol!=null">
                        case mst.rank_upd when 99999999 then  mst.rank_upd else
                        ROW_NUMBER () OVER (partition by
                        <foreach collection="orderCol" item="list" separator=",">
                            ${list}
                        </foreach>
                        ORDER BY
                        <foreach collection="orderCol" item="list" separator=",">
                            ${list}
                        </foreach>
                        ,case mst.rank when -1 then 1 else 2 end  asc,mst.rank_upd asc ) end AS rank_upd
                    </if>
                </when>
                <when test="item == 'branch_num' || item == 'pos_amount'">
                    COALESCE(mst.${item},0)as ${item}
                </when>
                <otherwise>
                    case COALESCE(mst.${item},'_') when '' then '_' else COALESCE(mst.${item},'_') end as ${item}
                </otherwise>
            </choose>
            ,COALESCE(cast(num.branch_nums as text),mst.branch_num_upd) as branch_num_upd
        </foreach>
        from ${tablename} mst
        left join (select * from priority.priority_order_branch_num  where priority_order_cd = #{priorityOrderCd}) as num
        on mst.jan_new = num.jan_news
        left join (select * from  priority.work_priority_order_jan_new  where priority_order_cd = #{priorityOrderCd}) as jans
        on mst.jan_old = jans.jan_new
        left join (select * from  priority.work_priority_order_jan_card  where priority_order_cd = #{priorityOrderCd}) as cards
        on mst.jan_new = cards.jan_old
        <if test="orderCol!=null">
            order by
            <foreach collection="orderCol" item="list" separator=",">
                ${list}
            </foreach>
            ,rank_upd
        </if>
    </select>
    <select id="getTmpTable" resultType="java.util.Map">
        select
        <foreach collection="colName" item="item" separator=",">

                <choose >
                    <when test="item == 'jan_new'">
                       case coalesce (rep.jan_new,pro.jan_new,datas.jan_old)  when '_' then datas.jan_new
                           else coalesce (rep.jan_new,pro.jan_new,datas.jan_old)
                           end jan_new
                    </when>
                    <otherwise>
                          datas.${item}
                    </otherwise>
                </choose>

        </foreach>
        from ${tableName} datas
        left join priority.work_priority_order_jan_proposal pro
        on datas.jan_old = pro.jan_old and pro.priority_order_cd = #{priorityOrderCd} and pro.company_cd = #{companyCd} and pro.flag = 1
        and not exists(select jan_old from priority.priority_order_jan_replace rep1 where pro.jan_old = rep1.jan_new and rep1.priority_order_cd = pro.priority_order_cd)
        and not exists(select jan_old from priority.priority_order_jan_replace rep2 where pro.jan_new = rep2.jan_old and rep2.priority_order_cd = pro.priority_order_cd)
        left join priority.priority_order_jan_replace rep
        on datas.jan_old = rep.jan_old and rep.company_cd = #{companyCd}
    </select>
    <select id="selectPriorityStratumName" resultType="java.util.Map">
        SELECT "2" as name ,"3" as id,1 as attr_type
        FROM ${tableName}
        where "4" is not null and "1" like '%_name'
        order by "4"::integer
    </select>

    <insert id="insert" >
    insert into ${tablename} (
            <foreach collection="keyNameList" separator="," item="key">
              ${key.name}
            </foreach>
                                     )
    values
           <foreach collection="lists" separator="," item="list">
           (
             <foreach collection="keyNameList" separator="," item="keys">
                 <choose>
                     <when test="keys.name == 'pos_amount' || keys.name == 'branch_num' || keys.name == 'rank' || keys.name == 'rank_prop' || keys.name == 'rank_upd'">
                         case #{list.${keys.name}} ::character varying
                            when '_' then '99999998'::integer
                             when '' then '0'::integer
                            when '新規' then '-1'::integer
                            when 'カット' then '99999999'::integer
                         else #{list.${keys.name}} :: integer end
                     </when>
                             <when test="keys.name == 'goods_rank'">
                                 <if test="list.goods_rank != null">
                                     case #{list.goods_rank} ::character varying
                                     when '_' then '99999998'::integer
                                     when '' then '0'::integer
                                     when '新規' then '-1'::integer
                                     when 'カット' then '99999999'::integer
                                     else #{list.goods_rank} :: integer end
                                 </if>
                                <if test="list.goods_rank == null">
                                    case #{list.rank_prop} ::character varying
                                    when '_' then '99999998'::integer
                                    when '' then '0'::integer
                                    when '新規' then '-1'::integer
                                    when 'カット' then '99999999'::integer
                                    else #{list.rank_prop} :: integer end
                                </if>
                             </when>
                     <otherwise>
                         #{list.${keys.name}}
                     </otherwise>
                 </choose>

             </foreach>
             )
           </foreach>
  </insert>
    <insert id="insertJanNew">
        insert into ${tableName}(
        <foreach collection="lists[0]" item="item" index="index" separator=",">
                                 ${index}
        </foreach>
                    ,rank)
                          values
                    <foreach collection="lists"  item="list" separator=",">
                        (<foreach collection="list" item="item" separator=",">
                            #{item}
                        </foreach>
                        ,-1)
                    </foreach>

    </insert>
    <insert id="insertTmpTable">
        insert into ${tableName}(
        <foreach collection="lists[0]" item="item" index="index" separator=",">
                                 ${index}
        </foreach>)
        values
        <foreach collection="lists"  item="list" separator=",">
            (<foreach collection="list" item="item" separator=",">
            #{item}
        </foreach>)
        </foreach>
    </insert>
    <delete id="deleteExistJanNew">
        delete from ${tableName}
        <where>
            jan_new in
            <foreach collection="janNews" index="index" item="item" close=")" open="(" separator=",">
                #{item}
            </foreach>
        </where>
    </delete>
    <delete id="deleteJanNew">
        delete from ${tablename} tmp
        where exists(select * from priority.work_priority_order_jan_new jannew
        where company_cd=#{companyCd} and priority_order_cd=#{priorityOrderCd} and jan_new=tmp.jan_new);
    </delete>
    <delete id="truncateTable">
        TRUNCATE TABLE ${table_name};
    </delete>
</mapper>
